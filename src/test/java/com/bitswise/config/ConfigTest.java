package com.bitswise.config;

import static org.junit.Assert.*;

import java.util.Map;

import junit.framework.Assert;

import org.junit.Test;

import com.bitswise.config.delta.DeltaReader;
import com.bitswise.config.delta.DeltaWriter;


public class ConfigTest {
	
	@Test
	public void testCreateAndWriteAndApplyDeltaConfig() {
		// initial config
		Config globalConfig = new Config("global");
		globalConfig.putConfigEntry(new ConfigEntry(globalConfig, "entry-1", "value-1"));
		globalConfig.putConfigEntry(new ConfigEntry(globalConfig, "entry-2", "value-2"));
		Config dcConfig = new Config(globalConfig, "us-west-1");
		dcConfig.putConfigEntry(new ConfigEntry(dcConfig, "entry-3", "value-3"));
		dcConfig.putConfigEntry(new ConfigEntry(dcConfig, "entry-4", "value-4"));
		// initial delta
		Map<DeltaRootKey,  Map<String, Entity>> delta = 
			new DeltaWriter().createDelta(null, globalConfig);
		
		// apply initial delta to null config
		Config appliedConfig = new DeltaReader().applyDelta(delta, null);
		assertTrue(globalConfig.equals(appliedConfig));

	}

	@Test
	public void testCreateCloneModifyWriteDeltaApplyDeltaToOriginalCompareConfig() {
		// initial config
		Config globalConfig = new Config("global");
		globalConfig.putConfigEntry(new ConfigEntry(globalConfig, "entry-1", "value-1"));
		globalConfig.putConfigEntry(new ConfigEntry(globalConfig, "entry-2", "value-2"));
		Config dcConfig = new Config(globalConfig, "us-west-1");
		dcConfig.putConfigEntry(new ConfigEntry(dcConfig, "entry-3", "value-3"));
		dcConfig.putConfigEntry(new ConfigEntry(dcConfig, "entry-4", "value-4"));
		
		// config's copy
		Config globalConfigClone = new Config(globalConfig);
		globalConfigClone.removeConfig(dcConfig);
		
		// delta
		Map<DeltaRootKey,  Map<String, Entity>> delta = 
			new DeltaWriter().createDelta(globalConfig, globalConfigClone);
		
		// apply modified globalConfigClone's delta to original globalConfig
		// the output of this operation must a Config instance equal to globalConfigClone
		Config appliedConfig = new DeltaReader().applyDelta(delta, globalConfig);
		assertTrue(globalConfigClone.equals(appliedConfig));
		
		// make clone config equal to original config again
		globalConfigClone.putConfig(dcConfig);

		// delta
		delta = 
			new DeltaWriter().createDelta(appliedConfig, globalConfigClone);
		
		// apply modified globalConfigClone's delta to original globalConfig
		// the output of this operation must be a Config instance equal to globalConfig
		appliedConfig = new DeltaReader().applyDelta(delta, appliedConfig);
		assertTrue(globalConfig.equals(appliedConfig));

	}
	
	/**
	 * Config: 
	 * 
	 * global
	 *   entry-1 = value-1
	 *   entry-2 = value-2
	 *   us-west-1
	 *     entry-3 = value-3
	 *     entry-4 = value-4
	 *       us-west-1a
	 *         entry-5 = value-5
	 *         entry-6 = value-6
	 *   us-east-1
	 *     entry-7 = value-7
	 *     entry-8 = value-8
	 *     
	 *   Demonstrates a workflow of config edits by multiple clients and delta 
	 *   exchanges with the server, where each client is able to restore
	 *   the config to its latest version make changes and allow other clients
	 *   to receive those changes to sync up their config state
	 *   
	 *   The delta sequencing (versioning and total order enforcement) is currently not supported
	 *   and is manually encoded in this test
	 **/
	
	@Test
	public void testConfigVersioning() {
		// initial config generated by client 1
		Config client1GlobalConfigVersion1 = new Config("global");
		client1GlobalConfigVersion1.putConfigEntry(new ConfigEntry(client1GlobalConfigVersion1, "entry-1", "value-1"));
		client1GlobalConfigVersion1.putConfigEntry(new ConfigEntry(client1GlobalConfigVersion1, "entry-2", "value-2"));
		
		Config dcConfig1 = new Config(client1GlobalConfigVersion1, "us-west-1");
		dcConfig1.putConfigEntry(new ConfigEntry(dcConfig1, "entry-3", "value-3"));
		dcConfig1.putConfigEntry(new ConfigEntry(dcConfig1, "entry-4", "value-4"));
		
		Config azConfig1 = new Config(dcConfig1, "us-west-1a");
		azConfig1.putConfigEntry(new ConfigEntry(azConfig1, "entry-5", "value-5"));
		azConfig1.putConfigEntry(new ConfigEntry(azConfig1, "entry-6", "value-6"));

		Config dcConfig2 = new Config(client1GlobalConfigVersion1, "us-east-1");
		dcConfig2.putConfigEntry(new ConfigEntry(dcConfig2, "entry-7", "value-7"));
		dcConfig2.putConfigEntry(new ConfigEntry(dcConfig2, "entry-8", "value-8"));


		// delta version 1
		Map<DeltaRootKey,  Map<String, Entity>> deltaVersion1 = 
			new DeltaWriter().createDelta(null, client1GlobalConfigVersion1);
		
		// client 2 config's copy retrieved from server holding version1 config delta 
		Config client2GlobalConfigVersion1 = new DeltaReader().applyDelta(deltaVersion1, null);
		assertTrue(client1GlobalConfigVersion1.equals(client2GlobalConfigVersion1));
		
		// create a clone on client 2 for later delta generation
		Config client2GlobalConfigVersion2 = new Config(client2GlobalConfigVersion1);
		// remove "us-west-1" DC Config 
		client2GlobalConfigVersion2.removeConfigByName("us-west-1");

		// delta version 2
		Map<DeltaRootKey,  Map<String, Entity>> deltaVersion2 = 
			new DeltaWriter().createDelta(client2GlobalConfigVersion1, client2GlobalConfigVersion2);
		
		
		// client 3 config's copy retrieved from server holding version1 + version2 config delta
		// which should produce the equivalent of client2GlobalConfigVersion2 config
		Config client3GlobalConfigVersion2 =  new DeltaReader().applyDelta(deltaVersion1, null);
		client3GlobalConfigVersion2 =  new DeltaReader().applyDelta(deltaVersion2, client3GlobalConfigVersion2);
		assertTrue(client3GlobalConfigVersion2.equals(client2GlobalConfigVersion2));
		// create a clone on client 3 for later delta generation
		Config client3GlobalConfigVersion3 = new Config(client3GlobalConfigVersion2);

		dcConfig1 = new Config(client3GlobalConfigVersion3, "us-west-1");
		dcConfig1.putConfigEntry(new ConfigEntry(dcConfig1, "entry-4", "value-4"));
		client3GlobalConfigVersion3.putConfig(dcConfig1);
		client3GlobalConfigVersion3.removeConfigEntryByName("entry-1");

		// delta version 3
		Map<DeltaRootKey,  Map<String, Entity>> deltaVersion3 = 
			new DeltaWriter().createDelta(client3GlobalConfigVersion2, client3GlobalConfigVersion3);

		
		// replay deltas to get to the all config versions on server side requested on demand
		
		// initial state no prior Config instance exists
		Config serverGloablConfigVersino1 = new DeltaReader().applyDelta(deltaVersion1, null);
		assertTrue(serverGloablConfigVersino1.equals(client1GlobalConfigVersion1));

		// apply delta version 2 to existing Config instance
		Config serverGloablConfigVersion2 = new DeltaReader().applyDelta(deltaVersion1, null);
		serverGloablConfigVersion2 = new DeltaReader().applyDelta(deltaVersion2, serverGloablConfigVersion2);
		assertTrue(serverGloablConfigVersion2.equals(client2GlobalConfigVersion2));

		// apply delta version 3 to existing Config instance
		// apply delta version 2 to existing Config instance
		Config serverGloablConfigVersion3 = new DeltaReader().applyDelta(deltaVersion1, null);
		serverGloablConfigVersion3 = new DeltaReader().applyDelta(deltaVersion2, serverGloablConfigVersion3);
		serverGloablConfigVersion3 = new DeltaReader().applyDelta(deltaVersion3, serverGloablConfigVersion3);
		assertTrue(serverGloablConfigVersion3.equals(client3GlobalConfigVersion3));

	}
}
